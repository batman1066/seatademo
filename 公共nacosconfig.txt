1.dataId:sentinel-dubbo.yaml
spring:
  cloud:
    compatibility-verifier:
      enabled: false
    sentinel:
      transport:
        dashboard: 192.168.1.122:8090
      eager: true
      # API分组&流控规则配置文件配置
      datasource:
        flow-rules:
          nacos:
            server-addr: ${nacos.config.server-addr:${spring.cloud.nacos.config.server-addr}}
            data-id: ${spring.application.name}-flow-rules
            namespace: dev-sentinel
            group-id: DEFAULT_GROUP
            username: ${nacos.config.username:${spring.cloud.nacos.config.username}}
            password: ${nacos.config.password:${spring.cloud.nacos.config.password}}
            data-type: json
            rule-type: flow
        degrade-rules:
          nacos:
            server-addr: ${nacos.config.server-addr:${spring.cloud.nacos.config.server-addr}}
            data-id: ${spring.application.name}-degrade-rules
            namespace: dev-sentinel
            group-id: DEFAULT_GROUP
            username: ${nacos.config.username:${spring.cloud.nacos.config.username}}
            password: ${nacos.config.password:${spring.cloud.nacos.config.password}}
            data-type: json
            rule-type: degrade
#配置sentinel写入nacos的连接信息
sentinel:
  write:
    nacos:
      serverAddr: ${nacos.config.server-addr:${spring.cloud.nacos.config.server-addr}}
      namespace: dev-sentinel
      groupId: DEFAULT_GROUP
      username: ${nacos.config.username:${spring.cloud.nacos.config.username}}
      password: ${nacos.config.password:${spring.cloud.nacos.config.password}}

2.dataId: sentinel-gateway.yaml
spring:
  cloud:
    sentinel:
      scg:
        # 降级处理配置 也可以在代码中实现
        fallback:
          # 指定降级处理的模式为返回响应，也可以配置成重定向redirect，配置重定向需要指定重定向地址
          mode: 'response'
          response-status: 200
          response-body: '{"code":500,"msg":"gateway配置文件配置-被限流了！"}'
          # mode 为 redirect 时使用
          redirect: 'https://www.baidu.com'
      transport:
        port: 8720
        dashboard: 192.168.1.122:8090
      eager: true
      # API分组&流控规则配置文件配置
      datasource:
        api-groups:
          nacos:
            server-addr: ${nacos.config.server-addr:${spring.cloud.nacos.config.server-addr}}
            data-id: ${spring.application.name}-gw-api-group-rules
            namespace: dev-sentinel
            group-id: DEFAULT_GROUP
            username: ${nacos.config.username:${spring.cloud.nacos.config.username}}
            password: ${nacos.config.password:${spring.cloud.nacos.config.password}}
            data-type: json
            rule-type: gw-api-group
        flow-rules:
          nacos:
            server-addr: ${nacos.config.server-addr:${spring.cloud.nacos.config.server-addr}}
            data-id: ${spring.application.name}-gw-flow-rules
            namespace: dev-sentinel
            group-id: DEFAULT_GROUP
            username: ${nacos.config.username:${spring.cloud.nacos.config.username}}
            password: ${nacos.config.password:${spring.cloud.nacos.config.password}}
            data-type: json
            rule-type: gw-flow
#配置sentinel写入nacos的连接信息
sentinel:
  write:
    nacos:
      serverAddr: ${nacos.config.server-addr:${spring.cloud.nacos.config.server-addr}}
      namespace: dev-sentinel
      groupId: DEFAULT_GROUP
      username: ${nacos.config.username:${spring.cloud.nacos.config.username}}
      password: ${nacos.config.password:${spring.cloud.nacos.config.password}}
3.通用的seata配置data_id:seata_app_client.yaml
seata:
  enabled: true
  application-id: ${spring.application.name}_seata
  tx-service-group: default_tx_group
  access-key: aliyunAccessKey
  secret-key: aliyunSecretKey
  enable-auto-data-source-proxy: true
  data-source-proxy-mode: AT
  use-jdk-proxy: false
  expose-proxy: false
  scan-packages: firstPackage,secondPackage,org.example
  excludes-for-scanning: firstBeanNameForExclude,secondBeanNameForExclude
  #这些类datasource不会被代理
  excludes-for-auto-proxying: firstClassNameForExclude,secondClassNameForExclude
  client:
    rm:
      async-commit-buffer-limit: 10000
      report-retry-count: 5
      table-meta-check-enable: false
      report-success-enable: false
      saga-branch-register-enable: false
      saga-json-parser: fastjson
      saga-retry-persist-mode-update: false
      saga-compensate-persist-mode-update: false
      tcc-action-interceptor-order: -2147482648 #Ordered.HIGHEST_PRECEDENCE + 1000
      sql-parser-type: druid
      applicationDataLimit: 64000
      applicationDataLimitCheck: false
      lock:
        retry-interval: 10
        retry-times: 30
        retry-policy-branch-rollback-on-conflict: true
    tm:
      commit-retry-count: 5
      rollback-retry-count: 5
      default-global-transaction-timeout: 60000
      degrade-check: false
      degrade-check-period: 2000
      degrade-check-allow-times: 10
      interceptor-order: -2147482648 #Ordered.HIGHEST_PRECEDENCE + 1000
    undo:
      data-validation: true
      log-serialization: jackson
      log-table: undo_log
      only-care-update-columns: true
      compress:
        enable: true
        type: zip
        threshold: 64k
    load-balance:
      type: XID
      virtual-nodes: 10
  service:
    vgroup-mapping:
      default_tx_group: default
    grouplist:
      default: 127.0.0.1:8091
    disable-global-transaction: false
  transport:
    shutdown:
      wait: 3
    thread-factory:
      boss-thread-prefix: NettyBoss
      worker-thread-prefix: NettyServerNIOWorker
      server-executor-thread-prefix: NettyServerBizHandler
      share-boss-worker: false
      client-selector-thread-prefix: NettyClientSelector
      client-selector-thread-size: 1
      client-worker-thread-prefix: NettyClientWorkerThread
      worker-thread-size: default
      boss-thread-size: 1
    type: TCP
    server: NIO
    heartbeat: true
    serialization: seata
    compressor: none
    enable-tm-client-batch-send-request: false
    enable-rm-client-batch-send-request: true
    rpc-rm-request-timeout: 15000
    rpc-tm-request-timeout: 30000
  config:
    type: nacos
    nacos:
      namespace: ${nacos.config.namespace}
      server-addr: ${nacos.config.server-addr}
      group: SEATA_GROUP
      context-path:
      data-id: seataClient.properties
      ##1.The following configuration is for the open source version of Nacos
      username: ${nacos.config.username}
      password: ${nacos.config.password}
      ##2.The following configuration is for the MSE Nacos on aliyun
      #access-key:
      #secret-key:
      ##3.The following configuration is used to deploy on Aliyun ECS or ACK without authentication
      #ram-role-name:
    custom:
      name:
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: ${nacos.config.server-addr}
      group: "SEATA_GROUP"
      namespace: ${nacos.config.namespace}
      context-path:
      client-application: ${spring.application.name}_seata
      ##1.The following configuration is for the open source version of Nacos
      username: ${nacos.config.username}
      password: ${nacos.config.password}
      ##2.The following configuration is for the MSE Nacos on aliyun
      #access-key:
      #secret-key:
      ##3.The following configuration is used to deploy on Aliyun ECS or ACK without authentication
      #ram-role-name:
      ##if use Nacos naming meta-data for SLB service registry, specify nacos address pattern rules here
      #slbPattern =
    custom:
      name:
  log:
    exception-rate: 100
  tcc:
    fence:
      log-table-name: tcc_fence_log
      clean-period: 1h
    # You can choose from the following options: fastjson, jackson, gson
    context-json-parser-type: fastjson
  saga:
    enabled: false
    state-machine:
      table-prefix: seata_
      enable-async: false
      async-thread-pool:
        core-pool-size: 1
        max-pool-size: 20
        keep-alive-time: 60
      trans-operation-timeout: 1800000
      service-invoke-timeout: 300000
      auto-register-resources: true
      resources:
        - classpath*:seata/saga/statelang/**/*.json
      default-tenant-id: 000001
      charset: UTF-8
5.dataId:dubbo.yaml
#自定义，以免下面反复写很长表达式
mynacos:
    address: ${nacos.config.server-addr:${spring.cloud.nacos.config.server-addr}}
    username: ${nacos.config.username:${spring.cloud.nacos.config.username}}
    password: ${nacos.config.password:${spring.cloud.nacos.config.password}}
dubbo:
  registry:
    address: nacos://${mynacos.address}?username=${mynacos.username}&password=${mynacos.password}
    # This will enable application-level service discovery only (the recommended service discovery method for Dubbo3).
    # For users upgrading from Dubbo2.x, please set the value to 'all' for smooth migration.
    register-mode: instance
    parameters:
      namespace: dev
  protocol:
    name: tri
    port: ${dubbo.service.port}
  application:
    name: ${spring.application.name}
    logger: slf4j
  consumer:
    check: false
